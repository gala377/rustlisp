(import "std/testing" assert-equal?)
(import "std/threading" ~> ~>>)

(macro (id a) `(list ,@a))
(def (foo a) `(list ,@a))

(assert-equal (id (1 2 3)) '(1 2 3))
(assert-equal (foo '(1 2 3)) '(list 1 2 3))

(macro (insert-1 func-call insert)
  (if (list? func-call)
    (+ (list (head func-call) insert) (tail func-call))
    (panic! "insert-1 can only be used with function calls")))

(assert-equal (insert-1 (list 2 3 4) 1) '(1 2 3 4))

(macro (top-level-begin a b)
  `(begin
    (def ,a "hello")
    (def ,b "world")
))

(top-level-begin foo bar)

(assert-equal foo "hello")
(assert-equal bar "world")

(def i 0)
(macro (void x)
  (set! i (++ i))
  none)

(def (use-void)
  (void a))

(use-void)
(use-void)
(use-void)

; After expansion macro is evaluated only once

(assert-equal i 1 "After expansion macro is evaluated only once")

(def (pass-macro m) (m "a" (+ "b") (+ "c")))

(assert-equal? (pass-macro ~>) "abc" "Assertion failed")
(assert-equal? (pass-macro ~>>) "abc" "When passing macro it is not reevaluated")

(def foo-bar 'foo-bar)
(def k 0)
(macro (expand-a a)
  (set! k (++ k))
  `(expand-b ,a))

(macro (expand-b a)
  (set! k (++ k))
  `(expand-c ,a))

(macro (expand-c a)
  (set! k (++ k))
  a)

(def (use-expand-a)
  (expand-a foo-bar))

(assert-equal? (use-expand-a) 'foo-bar "Use expand returns foo-bar")
(use-expand-a)
(use-expand-a)
(use-expand-a)
(assert-equal? k 3 "K should be incremented only 3 times")

(def (lazy-macros m)
  (lambda () (m "a"
    (+ "b")
    (+ "c"))))

(def lazy-a (lazy-macros ~>))
(def lazy-b (lazy-macros ~>>))


(assert-equal? (lazy-b) "cba" "Lazy expansion b")
(assert-equal? (lazy-a) "cba" "Lazy expansion a")

(def (lazy-macros-2 m p)
  (if p (lambda () (m "a" (+ "b") (+ "c")))
        (lambda () (m "a" (+ "b") (+ "c")))))

(def lazy-a-2 (lazy-macros-2 ~> #t))
(def lazy-b-2 (lazy-macros-2 ~>> #f))


(assert-equal? (lazy-b-2) "cba" "Lazy expansion b")
(assert-equal? (lazy-a-2) "abc" "Lazy expansion a")
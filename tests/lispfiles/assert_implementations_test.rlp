(def my-list '(1 2 3))
(def my-string "my-string")
(def my-lambda (lambda () '()))
(def (simple-func a b) (+ a b))


(assert 1 1 "this passes")
(assert my-list my-list "this passes")
(assert my-string my-string "this passes")
(assert my-lambda my-lambda "this passes")
(assert simple-func simple-func "this passes")
(assert assert assert "this passes")
(assert "my-string" my-string "this passes")
(assert 'some-sym 'some-sym "this passes")

(assert-true #t "this passes")
(assert-true (not (eq? my-lambda assert)) "this passes")
(assert-true (not #f) "this passes")

(assert-equal '(1 2 3) '(1 2 3) "this passes")
(assert-equal '(1 2 (1 2 a (b 2 3))) '(1 2 (1 2 a (b 2 3))) "This passes")
(assert-equal 1 1 "this passes")
(assert-equal my-list my-list "this passes")
(assert-equal my-string my-string "this passes")
(assert-equal my-lambda my-lambda "this passes")
(assert-equal simple-func simple-func "this passes")
(assert-equal assert assert "this passes")
(assert-equal "my-string" my-string "this passes")
(assert-equal 'some-sym 'some-sym "this passes")